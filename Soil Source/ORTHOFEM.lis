Silverfrost FTN95/x64 Ver 8.50.0  ORTHOFEM.FOR  Sun Oct 27 15:06:02 2019

Compiler used    [C:\Program Files (x86)\Silverfrost\FTN95\FTN95.EXE]
Salflibc path    [C:\Program Files (x86)\Silverfrost\FTN95\salflibc.dll]
Salflibc version [21.4.29.16]
Compiler options in effect:
    64;BINARY;CFPP;ERROR_NUMBERS;FIXED_FORMAT;FPP;IGNORE;LIST;
    LIST_INSERT_FILES;NO_BANNER;TABS;UNLIMITED_ERRORS;VS7;XREF;

   0001   * Source file ORTHOFEM.FOR |||||||||||||||||||||||||||||||||||||||||||||               AT 0
   0002   *                                                                                      AT 6e
   0003   *                            ORTHOFEM                                                  AT 6e
   0004   *                                                                                      AT 6e
   0005   *                           VERSION 1.02                                               AT 6e
   0006   *                                                                                      AT 6e
   0007   *                      FORTRAN SUBROUTINES FOR                                         AT 6e
   0008   *                   ORTHOMIN OR CONJUGATE GRADIENT                                     AT 6e
   0009   *               MATRIX SOLUTION ON FINITE-ELEMENT GRIDS                                AT 6e
   0010   *                                                                                      AT 6e
   0011   *     ***********************************************************                      AT 6e
   0012   *                                                                                      AT 6e
   0013   *                           CARL A. MENDOZA                                            AT 6e
   0014   *                                                                                      AT 6e
   0015   *                      WITH CONTRIBUTIONS FROM:                                        AT 6e
   0016   *                            RENE THERRIEN                                             AT 6e
   0017   *                                                                                      AT 6e
   0018   *                     BASED ON AN ORIGINAL CODE BY:                                    AT 6e
   0019   *                         FRANK W. LETNIOWSKI                                          AT 6e
   0020   *                                                                                      AT 6e
   0021   *              WATERLOO CENTRE FOR GROUNDWATER RESEARCH                                AT 6e
   0022   *                       UNIVERSITY OF WATERLOO                                         AT 6e
   0023   *                         WATERLOO, ONTARIO                                            AT 6e
   0024   *                          CANADA, N2L 3G1                                             AT 6e
   0025   *                                                                                      AT 6e
   0026   *                    LATEST UPDATE: JANUARY 1991                                       AT 6e
   0027   *                                                                                      AT 6e
   0028   *                                                                                      AT 6e
   0029   *     ***********************************************************                      AT 6e
   0030   *                                                                                      AT 6e
   0031   *                   COPYRIGHT (c) 1989, 1990, 1991                                     AT 6e
   0032   *                            E.A. SUDICKY                                              AT 6e
   0033   *                            C.A. MENDOZA                                              AT 6e
   0034   *              WATERLOO CENTRE FOR GROUNDWATER RESEARCH                                AT 6e
   0035   *                                                                                      AT 6e
   0036   *          DUPLICATION OF THIS PROGRAM, OR ANY PART THEREOF,                           AT 6e
   0037   *          WITHOUT THE EXPRESS PERMISSION OF THE COPYRIGHT                             AT 6e
   0038   *          HOLDERS IS STRICTLY FORBIDDEN                                               AT 6e
   0039   *                                                                                      AT 6e
   0040   *     ***********************************************************                      AT 6e
   0041   *                                                                                      AT 6e
   0042   *               Modified for SWMS_2D code by Jirka Simunek                             AT 6e
   0043   *                            april 1993                                                AT 6e
   0044   *                                                                                      AT 6e
   0045   *     ***********************************************************                      AT 6e
   0046   *                                                                                      AT 6e
   0047   *                             DISCLAIMER                                               AT 6e
   0048   *                                                                                      AT 6e
   0049   *     ALTHOUGH GREAT CARE HAS BEEN TAKEN IN PREPARING THIS CODE                        AT 6e
   0050   *     AND THE ACCOMPANYING DOCUMENTATION, THE AUTHORS CANNOT BE                        AT 6e
   0051   *     HELD RESPONSIBLE FOR ANY ERRORS OR OMISSIONS.  THE USER IS                       AT 6e
   0052   *     EXPECTED TO BE FAMILIAR WITH THE FINITE-ELEMENT METHOD,                          AT 6e
   0053   *     PRECONDITIONED ITERATIVE TECHNIQUES AND FORTRAN PROGRAMING.                      AT 6e
   0054   *                                                                                      AT 6e
   0055   *     ***********************************************************                      AT 6e
   0056   *                                                                                      AT 6e
   0057   *             A USER'S GUIDE IS AVAILABLE -> CONSULT IT!                               AT 6e
   0058   *                                                                                      AT 6e
   0059   *     THESE SUBROUTINES SOLVE A BANDED (OR SPARSE) MATRIX USING:                       AT 6e
   0060   *       - PRECONDITIONED ORTHOMIN FOR ASYMMETRIC MATRICES, OR                          AT 6e
   0061   *       - PRECONDITIONED CONJUGATE GRADIENT FOR SYMMETRIC MATRICES                     AT 6e
   0062   *         (FULL MATRIX STORAGE REQUIRED)                                               AT 6e
   0063   *                                                                                      AT 6e
   0064   *     PRECONDITIONING IS BY INCOMPLETE LOWER-UPPER DECOMPOSITION                       AT 6e
   0065   *       - ONLY ONE FACTORIZATION (GAUSSIAN ELIMINATION) IS PERFORMED                   AT 6e
   0066   *       - EQUIVALENT TO DKR FACTORIZATION                                              AT 6e
   0067   *                                                                                      AT 6e
   0068   *     THE SUBROUTINES ARE DESIGNED FOR FINITE-ELEMENT GRIDS                            AT 6e
   0069   *       - ARBITRARY ELEMENT SHAPES AND NUMBERING MAY BE USED                           AT 6e
   0070   *         - NUMBERING MAY, HOWEVER, AFFECT EFFICIENCY                                  AT 6e
   0071   *           - TRY TO MINIMIZE THE BANDWIDTH AS MUCH AS POSSIBLE                        AT 6e
   0072   *         - ALL ELEMENTS MUST HAVE THE SAME NUMBER OF LOCAL NODES                      AT 6e
   0073   *                                                                                      AT 6e
   0074   *                                                                                      AT 6e
   0075   *     THE FOLLOWING ROUTINES ARE CALLED FROM THE SOURCE PROGRAM:                       AT 6e
   0076   *       IADMAKE (IN,NN,NE,NLN,MNLN,MAXNB,IAD,IADN,IADD)                                AT 6e
   0077   *         -> ASSEMBLE ADJACENCY MATRIX                                                 AT 6e
   0078   *       FIND (I,J,K,NN,MAXNB,IAD,IADN)                                                 AT 6e
   0079   *         -> LOCATE MATRIX POSITION FOR A NODAL PAIR (ASSEMBLY)                        AT 6e
   0080   *       ILU (R,NN,MAXNB,IAD,IADN,IADD,B)                                               AT 6e
   0081   *         -> DECOMPOSE GLOBAL MATRIX                                                   AT 6e
   0082   *       ORTHOMIN (R,C,GT,NNR,MAXNB,MAXNN,IAD,IADN,IADD,B,VRV,                          AT 6e
   0083   *                 RES,RQI,RQ,Q,QI,RQIDOT,ECNVRG,RCNVRG,ACNVRG,                         AT 6e
   0084   *                 NORTH,MNORTH,MAXIT)                                                  AT 6e
   0085   *         -> SOLVE DECOMPOSED MATRIX                                                   AT 6e
   0086   *                                                                                      AT 6e
   0087   *     THESE ROUTINES CALL OTHER ROUTINES (LOCATED DIRECTLY BELOW THE                   AT 6e
   0088   *     APPROPRIATE PRIMARY ROUTINE IN THE CODE)                                         AT 6e
   0089   *                                                                                      AT 6e
   0090   *     THE FOLLOWING ARRAYS MUST BE DEFINED IN THE SOURCE PROGRAM                       AT 6e
   0091   *     (THESE ARRAYS ARE PASSED TO THE SOLVER SUBROUTINES):                             AT 6e
   0092   *                                                                                      AT 6e
   0093   *     IN(MNLN,MAXNE) - INCIDENCE MATRIX (ELEMENTAL NODE DEFINITION)                    AT 6e
   0094   *                                                                                      AT 6e
   0095   *     GT(MAXNN)      - RIGHT-HAND-SIDE VECTOR                                          AT 6e
   0096   *     C(MAXNN)       - SOLUTION VECTOR                                                 AT 6e
   0097   *     R(MAXNB,MAXNN) - GLOBAL MATRIX TO BE SOLVED                                      AT 6e
   0098   *                                                                                      AT 6e
   0099   *     ARRAY DIMENSIONING PARAMETERS                                                    AT 6e
   0100   *                                                                                      AT 6e
   0101   *     MAXNN  - MAXIMUM NUMBER OF NODES                                                 AT 6e
   0102   *     MAXNE  - MAXIMUM NUMBER OF ELEMENTS                                              AT 6e
   0103   *     MNLN   - MAXIMUM NUMBER OF LOCAL NODES (IN AN ELEMENT)                           AT 6e
   0104   *     MAXNB  - MAXIMUM NUMBER OF NODES ADJACENT TO A PARTICULAR NODE                   AT 6e
   0105   *              (INCLUDING ITSELF).                                                     AT 6e
   0106   *            - IE. THE MAXIMUM NUMBER OF INDEPENDENT NODES THAT A                      AT 6e
   0107   *              PARTICULAR NODE SHARES AN ELEMENT WITH.                                 AT 6e
   0108   *            - THIS WILL BE IDENTICALLY EQUIVALENT TO THE MAXIMUM                      AT 6e
   0109   *              NUMBER OF NONZERO ENTRIES IN A ROW OF THE FULL MATRIX.                  AT 6e
   0110   *     MNORTH - MAXIMUM NUMBER OF ORTHOGONALIZATIONS PERFORMED                          AT 6e
   0111   *              (AT LEAST MNORTH = 1 REQUIRED FOR CONJUGATE GRADIENT)                   AT 6e
   0112   *                                                                                      AT 6e
   0113   *                                                                                      AT 6e
   0114   *     ORTHOMIN ARRAY SPACE/VARIABLES                                                   AT 6e
   0115   *                                                                                      AT 6e
   0116   *     NORTH  - NUMBER OF ORTHOGONALIZATIONS TO PERFORM                                 AT 6e
   0117   *            - SET NORTH=0 FOR SYMMETRIC MATRICES (CONJUGATE GRADIENT)                 AT 6e
   0118   *     ECNVRG - RESIDUAL CONVERGENCE TOLERANCE                                          AT 6e
   0119   *     ACNVRG - ABSOLUTE CONVERGENCE TOLERANCE                                          AT 6e
   0120   *     RCNVRG - RELATIVE CONVERGENCE TOLERANCE                                          AT 6e
   0121   *     MAXIT  - MAXIMUM NUMBER OF ITERATIONS TO PERFORM                                 AT 6e
   0122   *     ITERP  - NUMBER OF ITERATIONS PERFORMED                                          AT 6e
   0123   *                                                                                      AT 6e
   0124   *     B(MAXNB,MAXNN) - ILU DECOMPOSED MATRIX                                           AT 6e
   0125   *     Q(MAXNN)   - SEARCH DIRECTION Q                                                  AT 6e
   0126   *     RQ(MAXNN)  - PRODUCT OF R AND Q                                                  AT 6e
   0127   *     VRV(MAXNN) - EITHER V OR PRODUCT OF R AND V                                      AT 6e
   0128   *     RES(MAXNN) - RESIDUAL                                                            AT 6e
   0129   *                                                                                      AT 6e
   0130   *     QI(MAXNN,MNORTH)  - STORAGE OF Q'S                                               AT 6e
   0131   *     RQI(MAXNN,MNORTH) - STORAGE OF PRODUCTS OF R AND Q                               AT 6e
   0132   *     RQIDOT(MNORTH)    - STORAGE OF DOT PRODUCTS OF RQ AND RQ                         AT 6e
   0133   *                                                                                      AT 6e
   0134   *     RESV   - PREVIOUS VALUE OF RES V DOT PRODUCT (CONJUGATE GRADIENT)                AT 6e
   0135   *                                                                                      AT 6e
   0136   *     IAD(MAXNB,MAXNN) - ADJACENCY MATRIX (NODAL CONNECTIONS)                          AT 6e
   0137   *                                                                                      AT 6e
   0138   *     IADN(MAXNN) - NUMBER OF ADJACENT NODES IN IAD (SELF-INCLUSIVE)                   AT 6e
   0139   *                                                                                      AT 6e
   0140   *     IADD(MAXNN) - POSITION OF DIAGONAL IN ADJACENCY MATRIX                           AT 6e
   0141   *                                                                                      AT 6e
   0142   *                                                                                      AT 6e
   0143   *     OTHER PARAMETERS PASSED FROM SOURCE PROGRAM                                      AT 6e
   0144   *                                                                                      AT 6e
   0145   *     NN  - NUMBER OF NODES                                                            AT 6e
   0146   *     NE  - NUMBER OF ELEMENTS                                                         AT 6e
   0147   *     NLN - NUMBER OF LOCAL NODES IN AN ELEMENT                                        AT 6e
   0148   *                                                                                      AT 6e
   0149   *                                                                                      AT 6e
   0150   *     APPROXIMATE REAL STORAGE SPACE FOR ORTHOMIN AND MATRIX EQUATION                  AT 6e
   0151   *                                                                                      AT 6e
   0152   *       ((6 + 2*MAXNB + 2*MNORTH)*MAXNN)*(8 BYTES)                                     AT 6e
   0153   *                                                                                      AT 6e
   0154   ************************************************************************               AT 6e
   0155                                                                                          AT 6e
   0156         subroutine IADMake(KX,NumNP,NumEl,NumElD,MaxNB,IAD,IADN,IADD)                    AT 6e
   0157                                                                                          AT 6e
   0158   *     Generate the adjacency matrix for nodes from the element                         AT 6e
   0159   *     indidence matrix                                                                 AT 6e
   0160                                                                                          AT 6e
   0161   *     Requires subroutine Insert                                                       AT 6e
   0162                                                                                          AT 6e
   0163         dimension KX(NumElD,4),IAD(MaxNB,NumNP),IADN(NumNP),IADD(NumNP)                  AT 6e
   0164         integer e                                                                        AT 13f
   0165                                                                                          AT 13f
   0166   *     Determine independent adjacency within each element                              AT 13f
   0167   *     version for SWMS_2D                                                              AT 13f
   0168                                                                                          AT 13f
   0169         do 12 i=1,NumNP                                                                  AT 13f
   0170           IADN(i)=0                                                                      AT 170
   0171           IADD(i)=0                                                                      AT 189
   0172           do 11 j=1,MaxNB                                                                AT 19a
   0173             IAD(j,i)=0                                                                   AT 1d0
   0174   11      continue                                                                       AT 203
   0175   12    continue                                                                         AT 21e
   0176                                                                                          AT 23b
   0177         do 14 e=1,NumEl                                                                  AT 23b
   0178           NCorn=4                                                                        AT 270
   0179           if(KX(e,3).eq.KX(e,4)) NCorn=3                                                 AT 27b
   0180           do 13 n=1,NCorn-2                                                              AT 2d4
   0181             i=KX(e,1)                                                                    AT 300
   0182             j=KX(e,n+1)                                                                  AT 31c
   0183             k=KX(e,n+2)                                                                  AT 349
   0184                                                                                          AT 374
   0185             call Insert(i,j,kk,NumNP,MaxNB,IAD,IADN)                                     AT 374
   0186             call Insert(j,i,kk,NumNP,MaxNB,IAD,IADN)                                     AT 3c0
   0187             call Insert(i,k,kk,NumNP,MaxNB,IAD,IADN)                                     AT 40c
   0188             call Insert(k,i,kk,NumNP,MaxNB,IAD,IADN)                                     AT 458
   0189             call Insert(j,k,kk,NumNP,MaxNB,IAD,IADN)                                     AT 4a4
   0190             call Insert(k,j,kk,NumNP,MaxNB,IAD,IADN)                                     AT 4f0
   0191   13      continue                                                                       AT 53c
   0192   14    continue                                                                         AT 557
   0193                                                                                          AT 574
   0194   *     Determine self-adjacency terms                                                   AT 574
   0195                                                                                          AT 574
   0196         do 15 i=1,NumNP                                                                  AT 574
   0197           call Insert(i,i,kk,NumNP,MaxNB,IAD,IADN)                                       AT 5b0
   0198   *     Store self-adjacency position                                                    AT 5f7
   0199           IADD(i)=kk                                                                     AT 5f7
   0200   15    continue                                                                         AT 614
   0201         return                                                                           AT 62f
   0202         end                                                                              AT 634
   0203                                                                                          AT 6e
   0204   ************************************************************************               AT 0
   0205                                                                                          AT 6e
   0206         SUBROUTINE INSERT (I,J,K,NN,MAXNB,IAD,IADN)                                      AT 6e
   0207                                                                                          AT 6e
   0208   *     ADD J TO THE ADJACENCY LIST FOR I                                                AT 6e
   0209                                                                                          AT 6e
   0210   *     RETURNS THE POSITION K WHERE IT HAS BEEN ADDED, OR WHERE IT                      AT 6e
   0211   *     WAS ALREADY IN THE LIST.                                                         AT 6e
   0212                                                                                          AT 6e
   0213         DIMENSION IAD(MAXNB,NN),IADN(NN)                                                 AT 6e
   0214                                                                                          AT e6
   0215         LOGICAL FOUND                                                                    AT e6
   0216         FOUND = .FALSE.                                                                  AT e6
   0217                                                                                          AT ee
   0218   *     DETERMINE NUMBER OF NODES ALREADY IN ADJACENCY LIST                              AT ee
   0219                                                                                          AT ee
   0220         N = IADN(I)                                                                      AT ee
   0221         K = N + 1                                                                        AT 10f
   0222                                                                                          AT 121
   0223   *     DETERMINE WHETHER ALREADY IN LIST                                                AT 121
   0224                                                                                          AT 121
   0225         DO 10 L=1,N                                                                      AT 121
   0226           INODE = IAD(L,I)                                                               AT 144
   0227           IF (INODE.GE.J) THEN                                                           AT 183
   0228             K = L                                                                        AT 19b
   0229             IF (INODE.EQ.J) FOUND = .TRUE.                                               AT 1b2
   0230             GO TO 15                                                                     AT 1d8
   0231           ENDIF                                                                          AT 1dd
   0232      10 CONTINUE                                                                         AT 1dd
   0233                                                                                          AT 1f8
   0234      15 CONTINUE                                                                         AT 1f8
   0235                                                                                          AT 1f8
   0236   *     PLACE IN LIST (NUMERICAL ORDER)                                                  AT 1f8
   0237                                                                                          AT 1f8
   0238         IF (FOUND) THEN                                                                  AT 1f8
   0239          CONTINUE                                                                        AT 20f
   0240         ELSE                                                                             AT 20f
   0241           IF ((N+1).GT.MAXNB) THEN                                                       AT 20f
   0242             WRITE (* ,601) I,MAXNB                                                       AT 22b
   0243             WRITE (50,601) I,MAXNB                                                       AT 296
   0244     601     FORMAT (//5X,'ERROR IN IADMAKE: NODE ',I5,' HAS > '                          AT 301
   0245        &            ,I5,' ADJACENCIES')                                                  AT 301
   0246             STOP                                                                         AT 301
   0247           ENDIF                                                                          AT 314
   0248                                                                                          AT 314
   0249           IADN(I) = N + 1                                                                AT 314
   0250           DO 20 L=(N+1),(K+1),(-1)                                                       AT 339
   0251             IAD(L,I) = IAD(L-1,I)                                                        AT 374
   0252      20   CONTINUE                                                                       AT 3c5
   0253          IAD(K,I) = J                                                                    AT 3e0
   0254         ENDIF                                                                            AT 42f
   0255                                                                                          AT 42f
   0256         RETURN                                                                           AT 42f
   0257         END                                                                              AT 434
   0258                                                                                          AT 36
   0259   ************************************************************************               AT 0
   0260                                                                                          AT 36
   0261         SUBROUTINE FIND (I,J,K,NN,MAXNB,IAD,IADN)                                        AT 36
   0262                                                                                          AT 36
   0263   *     FOR NODE I, DETERMINE THE 'BAND' (K) RELATED TO ITS ADJACENCY TO                 AT 36
   0264   *     NODE J.                                                                          AT 36
   0265                                                                                          AT 36
   0266   *     IF NODE NOT ADJACENT, RETURN 0 AS THE 'BAND'                                     AT 36
   0267                                                                                          AT 36
   0268   C      DIMENSION IAD(MAXNB,NN),IADN(NN)                                                AT 36
   0269   C GR                                                                                   AT 36
   0270         DIMENSION IAD(MAXNB,NN),IADN(I)                                                  AT 36
   0271                                                                                          AT ae
   0272         K = 0                                                                            AT ae
   0273         N = IADN(I)                                                                      AT c1
   0274                                                                                          AT e3
   0275         DO 10 L=1,N                                                                      AT e3
   0276           INODE = IAD(L,I)                                                               AT 108
   0277                                                                                          AT 143
   0278   *     EXIT THE LOOP IF AT OR PAST THE REQUIRED POSITION                                AT 143
   0279                                                                                          AT 143
   0280           IF (INODE.GE.J) THEN                                                           AT 143
   0281             IF (INODE.EQ.J) K = L                                                        AT 15c
   0282             GO TO 20                                                                     AT 18b
   0283           ENDIF                                                                          AT 190
   0284      10 CONTINUE                                                                         AT 190
   0285                                                                                          AT 1a2
   0286      20 CONTINUE                                                                         AT 1a2
   0287                                                                                          AT 1a2
   0288         RETURN                                                                           AT 1a2
   0289         END                                                                              AT 1a7
   0290                                                                                          AT 82
   0291   ************************************************************************               AT 0
   0292                                                                                          AT 82
   0293         SUBROUTINE ILU (R,NN,MAXNB,IAD,IADN,IADD,B)                                      AT 82
   0294                                                                                          AT 82
   0295   *     INCOMPLETE LOWER-UPPER DECOMPOSITION OF MATRIX R INTO B                          AT 82
   0296   *     ONE STEP OF GAUSSIAN ELIMINATION PERFORMED                                       AT 82
   0297   *     DIAGONAL DOMINANCE IS ASSUMED - NO PIVOTING PERFORMED                            AT 82
   0298   *     REQUIRES FUNCTION DU                                                             AT 82
   0299                                                                                          AT 82
   0300         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 82
   0301         DIMENSION R(MAXNB,NN),IAD(MAXNB,NN),IADN(NN),IADD(NN),B(MAXNB,NN)                AT 82
   0302                                                                                          AT 1d4
   0303   *     INITIALIZE B                                                                     AT 1d4
   0304                                                                                          AT 1d4
   0305         DO 10 I=1,NN                                                                     AT 1d4
   0306           DO 10 J=1,MAXNB                                                                AT 211
   0307             B(J,I) = 0.0D0                                                               AT 241
   0308      10 CONTINUE                                                                         AT 27e
   0309                                                                                          AT 2b6
   0310   *     LOOP OVER NODES                                                                  AT 2b6
   0311                                                                                          AT 2b6
   0312         DO 20 I=1,NN                                                                     AT 2b6
   0313                                                                                          AT 2f1
   0314   *     DETERMINE NUMBER OF BANDS/POSITION OF DIAGONAL IN THIS ROW                       AT 2f1
   0315                                                                                          AT 2f1
   0316           N = IADN(I)                                                                    AT 2f1
   0317           K = IADD(I)                                                                    AT 30d
   0318                                                                                          AT 322
   0319   *     LOWER TRIANGULAR MATRIX                                                          AT 322
   0320                                                                                          AT 322
   0321           DO 30 J=1,(K-1)                                                                AT 322
   0322             SUM = R(J,I)                                                                 AT 351
   0323             ICUR = IAD(J,I)                                                              AT 38c
   0324             DO 40 L=1,(J-1)                                                              AT 3be
   0325               INODE = IAD(L,I)                                                           AT 3e1
   0326               SUM = SUM - B(L,I)*DU(INODE,ICUR,NN,MAXNB,IAD,IADN,IADD,B)                 AT 41a
   0327      40     CONTINUE                                                                     AT 4cd
   0328             B(J,I) = SUM                                                                 AT 4e8
   0329      30   CONTINUE                                                                       AT 526
   0330                                                                                          AT 543
   0331   *     DIAGONAL                                                                         AT 543
   0332                                                                                          AT 543
   0333           SUM = R(K,I)                                                                   AT 543
   0334           DO 50 L=1,(K-1)                                                                AT 57e
   0335             INODE = IAD(L,I)                                                             AT 5a1
   0336             SUM = SUM - B(L,I)*DU(INODE,I,NN,MAXNB,IAD,IADN,IADD,B)                      AT 5da
   0337      50   CONTINUE                                                                       AT 68d
   0338           D = 1.0D0/SUM                                                                  AT 6a8
   0339           B(K,I) = D                                                                     AT 6c5
   0340                                                                                          AT 6f9
   0341   *     UPPER TRIANGULAR MATRIX                                                          AT 6f9
   0342   *       - ACTUALLY D*U TO OBTAIN UNIT DIAGONAL                                         AT 6f9
   0343                                                                                          AT 6f9
   0344           DO 60 J=(K+1),N                                                                AT 6f9
   0345             SUM = R(J,I)                                                                 AT 721
   0346             ICUR = IAD(J,I)                                                              AT 75c
   0347             DO 70 L=1,(K-1)                                                              AT 78e
   0348               INODE = IAD(L,I)                                                           AT 7c1
   0349               SUM = SUM - B(L,I)*DU(INODE,ICUR,NN,MAXNB,IAD,IADN,IADD,B)                 AT 7fb
   0350      70     CONTINUE                                                                     AT 8ae
   0351             B(J,I) = D*SUM                                                               AT 8c9
   0352      60   CONTINUE                                                                       AT 911
   0353                                                                                          AT 92e
   0354      20 CONTINUE                                                                         AT 92e
   0355                                                                                          AT 949
   0356         RETURN                                                                           AT 949
   0357         END                                                                              AT 94e
   0358                                                                                          AT 58
   0359   ************************************************************************               AT 0
   0360                                                                                          AT 58
   0361         FUNCTION DU (I,INODE,NN,MAXNB,IAD,IADN,IADD,B)                                   AT 58
   0362                                                                                          AT 58
   0363   *     SEARCHES THE I'TH ROW OF THE UPPER DIAGONAL MATRIX                               AT 58
   0364   *     FOR AN ADJACENCY TO THE NODE 'INODE'                                             AT 58
   0365                                                                                          AT 58
   0366   *     RETURNS CORRESPONDING VALUE OF B (OR ZERO)                                       AT 58
   0367                                                                                          AT 58
   0368         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 58
   0369         DIMENSION IAD(MAXNB,NN),IADN(NN),IADD(NN),B(MAXNB,NN)                            AT 58
   0370                                                                                          AT 14e
   0371         TEMP = 0.0D0                                                                     AT 14e
   0372         N = IADN(I)                                                                      AT 15f
   0373         K = IADD(I)                                                                      AT 183
   0374                                                                                          AT 1a0
   0375         IF (I.EQ.INODE) THEN                                                             AT 1a0
   0376           TEMP = 1.0D0                                                                   AT 1be
   0377           GO TO 20                                                                       AT 1cf
   0378         ENDIF                                                                            AT 1d4
   0379                                                                                          AT 1d4
   0380         DO 10 J=(K+1),N                                                                  AT 1d4
   0381           IF (INODE.EQ.IAD(J,I)) THEN                                                    AT 207
   0382             TEMP = B(J,I)                                                                AT 254
   0383             GO TO 20                                                                     AT 299
   0384           ENDIF                                                                          AT 29e
   0385      10 CONTINUE                                                                         AT 29e
   0386                                                                                          AT 2b9
   0387      20 CONTINUE                                                                         AT 2b9
   0388         DU = TEMP                                                                        AT 2b9
   0389                                                                                          AT 2cb
   0390         RETURN                                                                           AT 2cb
   0391         END                                                                              AT 2d0
   0392                                                                                          AT 72
   0393   ************************************************************************               AT 0
   0394                                                                                          AT 72
   0395         SUBROUTINE ORTHOMIN (R,C,GT,NN,MAXNB,MAXNN,IAD,IADN,IADD,B,VRV,                  AT 72
   0396        &                     RES,RQI,RQ,Q,QI,RQIDOT,ECNVRG,RCNVRG,ACNVRG,                AT 72
   0397        &                     NORTH,MNORTH,MAXIT)                                         AT 72
   0398                                                                                          AT 72
   0399   *     ORTHOMIN OR CONJUGATE GRADIENT ACCELERATION/SOLUTION                             AT 72
   0400                                                                                          AT 72
   0401   *     CONJUGATE GRADIENT (SYMMETRIC MATRIX) IF NORTH=0                                 AT 72
   0402   *     (HOWEVER, NOTE THAT MNORTH MUST BE AT LEAST 1)                                   AT 72
   0403                                                                                          AT 72
   0404   *     REQUIRES FUNCTIONS SDOT,SDOTK,SNRM                                               AT 72
   0405   *     REQUIRES SUBROUTINES LUSOLV,MATM2,SAXPYK,SCOPY,SCOPYK                            AT 72
   0406                                                                                          AT 72
   0407         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 72
   0408         DIMENSION R(MAXNB,NN),C(NN),GT(NN),IAD(MAXNB,NN),IADN(NN),                       AT 72
   0409        &          IADD(NN),B(MAXNB,NN),VRV(NN),RES(NN),RQI(MAXNN,MNORTH),                AT 72
   0410        &          RQ(NN),Q(NN),RQIDOT(MNORTH),QI(MAXNN,MNORTH)                           AT 72
   0411                                                                                          AT 39d
   0412   *     INITIALIZE RESIDUAL VECTOR                                                       AT 39d
   0413                                                                                          AT 39d
   0414         CALL MATM2 (RES,R,C,NN,IAD,IADN,MAXNB)                                           AT 39d
   0415                                                                                          AT 3e9
   0416   *     Solution for homogeneous system of equations - Modified by Simunek               AT 3e9
   0417         iHomog=0                                                                         AT 3e9
   0418         DO 10 I=1,NN                                                                     AT 3f4
   0419           RES(I) = GT(I) - RES(I)                                                        AT 42c
   0420           if(abs(GT(i)).gt.1.d-300) iHomog=1                                             AT 459
   0421      10 CONTINUE                                                                         AT 483
   0422         if(iHomog.eq.0) then                                                             AT 4a0
   0423           do 11 i=1,NN                                                                   AT 4b1
   0424         C(i)=GT(i)                                                                       AT 4ec
   0425   11      continue                                                                       AT 512
   0426           return                                                                         AT 52d
   0427         end if                                                                           AT 532
   0428                                                                                          AT 532
   0429   *     LOOP OVER A MAXIMUM OF MAXIT ITERATIONS                                          AT 532
   0430                                                                                          AT 532
   0431         NORCUR = 0                                                                       AT 532
   0432                                                                                          AT 53d
   0433         DO 100 ITER=1,MAXIT                                                              AT 53d
   0434                                                                                          AT 56c
   0435   *     INVERT LOWER/UPPER MATRICES                                                      AT 56c
   0436                                                                                          AT 56c
   0437           CALL SCOPY (NN,RES,VRV)                                                        AT 56c
   0438                                                                                          AT 589
   0439           CALL LUSOLV (NN,MAXNB,IAD,IADN,IADD,B,VRV)                                     AT 589
   0440                                                                                          AT 5d5
   0441   *     COPY V INTO Q                                                                    AT 5d5
   0442                                                                                          AT 5d5
   0443           CALL SCOPY (NN,VRV,Q)                                                          AT 5d5
   0444                                                                                          AT 5f2
   0445   *     CALCULATE PRODUCT OF R AND V                                                     AT 5f2
   0446                                                                                          AT 5f2
   0447           CALL MATM2 (VRV,R,Q,NN,IAD,IADN,MAXNB)                                         AT 5f2
   0448                                                                                          AT 63e
   0449   *     COPY RV INTO RQ                                                                  AT 63e
   0450                                                                                          AT 63e
   0451           CALL SCOPY (NN,VRV,RQ)                                                         AT 63e
   0452                                                                                          AT 65b
   0453   *     RES V DOT PRODUCT (CONJUGATE GRADIENT)                                           AT 65b
   0454                                                                                          AT 65b
   0455           IF (NORTH.EQ.0) THEN                                                           AT 65b
   0456                                                                                          AT 674
   0457             DOT = SDOT(NN,RES,Q)                                                         AT 674
   0458             IF (NORCUR.EQ.0) RESV = DOT                                                  AT 69a
   0459                                                                                          AT 6bf
   0460           ENDIF                                                                          AT 6bf
   0461                                                                                          AT 6bf
   0462   *     LOOP OVER PREVIOUS ORTHOGONALIZATIONS                                            AT 6bf
   0463                                                                                          AT 6bf
   0464           K = 1                                                                          AT 6bf
   0465                                                                                          AT 6ca
   0466      20   IF (K.GT.NORCUR) GO TO 30                                                      AT 6ca
   0467                                                                                          AT 6e3
   0468   *     DETERMINE WEIGHTING FACTOR (CONJUGATE GRADIENT)                                  AT 6e3
   0469                                                                                          AT 6e3
   0470             IF (NORTH.EQ.0) THEN                                                         AT 6e3
   0471                                                                                          AT 6fd
   0472               ALPHA = DOT/RESV                                                           AT 6fd
   0473               RESV = DOT                                                                 AT 71b
   0474                                                                                          AT 734
   0475   *     DETERMINE WEIGHTING FACTOR (ORTHOMIN)                                            AT 734
   0476                                                                                          AT 734
   0477             ELSE                                                                         AT 734
   0478                                                                                          AT 734
   0479               DOT = SDOTK(NN,K,RQI,VRV,MAXNN,MNORTH)                                     AT 734
   0480               ALPHA = -DOT/RQIDOT(K)                                                     AT 77c
   0481                                                                                          AT 7a7
   0482             ENDIF                                                                        AT 7a7
   0483                                                                                          AT 7a7
   0484   *     SUM TO OBTAIN NEW Q AND RQ                                                       AT 7a7
   0485                                                                                          AT 7a7
   0486             CALL SAXPYK (NN,ALPHA,K,QI,Q,MAXNN,MNORTH)                                   AT 7a7
   0487             CALL SAXPYK (NN,ALPHA,K,RQI,RQ,MAXNN,MNORTH)                                 AT 7f3
   0488                                                                                          AT 83f
   0489             K = K + 1                                                                    AT 83f
   0490             GO TO 20                                                                     AT 846
   0491      30   CONTINUE                                                                       AT 84b
   0492                                                                                          AT 84b
   0493   *     CALCULATE WEIGHTING FACTOR (CONJUGATE GRADIENT)                                  AT 84b
   0494                                                                                          AT 84b
   0495           IF (NORTH.EQ.0) THEN                                                           AT 84b
   0496                                                                                          AT 864
   0497             DOT = SDOT(NN,Q,RQ)                                                          AT 864
   0498             OMEGA = RESV/DOT                                                             AT 88a
   0499                                                                                          AT 8a8
   0500   *     CALCULATE WEIGHTING FACTOR (ORTHOMIN)                                            AT 8a8
   0501                                                                                          AT 8a8
   0502           ELSE                                                                           AT 8a8
   0503                                                                                          AT 8a8
   0504             DOT = SDOT(NN,RES,RQ)                                                        AT 8a8
   0505             RQNORM = SDOT(NN,RQ,RQ)                                                      AT 8ce
   0506             OMEGA = DOT/RQNORM                                                           AT 8ef
   0507                                                                                          AT 908
   0508           ENDIF                                                                          AT 908
   0509                                                                                          AT 908
   0510   *     SAVE VALUES FOR FUTURE ORTHOGONALIZATIONS                                        AT 908
   0511                                                                                          AT 908
   0512           NORCUR = NORCUR + 1                                                            AT 908
   0513           IF (NORCUR.GT.NORTH) NORCUR = 1                                                AT 90f
   0514                                                                                          AT 937
   0515           CALL SCOPYK (NN,NORCUR,Q,QI,MAXNN,MNORTH)                                      AT 937
   0516           CALL SCOPYK (NN,NORCUR,RQ,RQI,MAXNN,MNORTH)                                    AT 976
   0517           RQIDOT(NORCUR) = RQNORM                                                        AT 9b5
   0518                                                                                          AT 9d6
   0519   *     UPDATE SOLUTION/RESIDUAL VECTORS                                                 AT 9d6
   0520                                                                                          AT 9d6
   0521           CALL SAXPYK (NN,OMEGA,NORCUR,QI,C,MAXNN,MNORTH)                                AT 9d6
   0522           CALL SAXPYK (NN,-OMEGA,NORCUR,RQI,RES,MAXNN,MNORTH)                            AT a22
   0523                                                                                          AT a87
   0524   *     DETERMINE CONVERGENCE PARAMETERS                                                 AT a87
   0525                                                                                          AT a87
   0526           RESMAX = SNRM(NN,RES)                                                          AT a87
   0527           DXNORM = DABS(OMEGA)*SNRM(NN,Q)                                                AT aa5
   0528           CNORM = SNRM(NN,C)                                                             AT adc
   0529           XRATIO = DXNORM/CNORM                                                          AT afa
   0530                                                                                          AT b13
   0531   *     ITERATION (DEBUG) OUTPUT                                                         AT b13
   0532                                                                                          AT b13
   0533   *     STOP ITERATING IF CONVERGED                                                      AT b13
   0534                                                                                          AT b13
   0535           IF (RESMAX.LT.ECNVRG) GO TO 200                                                AT b13
   0536           IF (XRATIO.LT.RCNVRG) GO TO 200                                                AT b3a
   0537           IF (DXNORM.LT.ACNVRG) GO TO 200                                                AT b61
   0538                                                                                          AT b88
   0539     100 CONTINUE                                                                         AT b88
   0540                                                                                          AT ba5
   0541   *     TERMINATE IF TOO MANY ITERATIONS                                                 AT ba5
   0542                                                                                          AT ba5
   0543         WRITE (* ,602) MAXIT,RESMAX,XRATIO,DXNORM                                        AT ba5
   0544         WRITE (70,602) MAXIT,RESMAX,XRATIO,DXNORM                                        AT c38
   0545                                                                                          AT ccb
   0546    602  FORMAT (///5X,'ORTHOMIN TERMINATES -- TOO MANY ITERATIONS',                      AT ccb
   0547        *          /8X,'MAXIT  = ',I5,                                                    AT ccb
   0548        *          /8X,'RESMAX = ',E12.4,                                                 AT ccb
   0549        *          /8X,'XRATIO = ',E12.4,                                                 AT ccb
   0550        *          /8X,'DXNORM = ',E12.4)                                                 AT ccb
   0551                                                                                          AT ccb
   0552         STOP                                                                             AT ccb
   0553                                                                                          AT cde
   0554     200 CONTINUE                                                                         AT cde
   0555                                                                                          AT cde
   0556   *     RETURN NUMBER OF ITERATIONS REQUIRED                                             AT cde
   0557                                                                                          AT cde
   0558         ITERP = ITER                                                                     AT cde
   0559                                                                                          AT cec
D:\2DSOIL_Grape\Soil Source\ORTHOFEM.FOR(558) : warning 242 - Variable ITERP has been given a value but never used 
   0560         RETURN                                                                           AT cec
   0561         END                                                                              AT cf1
   0562                                                                                          AT 48
   0563   ************************************************************************               AT 0
   0564                                                                                          AT 48
   0565         SUBROUTINE LUSOLV (NN,MAXNB,IAD,IADN,IADD,B,VRV)                                 AT 48
   0566                                                                                          AT 48
   0567   *     LOWER DIAGONAL MATRIX INVERSION BY FORWARD SUBSTITUTION                          AT 48
   0568   *     UPPER DIAGONAL MATRIX INVERSION BY BACKWARD SUBSTITUTION                         AT 48
   0569   *     LOWER/UPPER MATRICES ARE IN B                                                    AT 48
   0570   *     RIGHT-HAND-SIDE VECTOR IS IN VRV AT START                                        AT 48
   0571   *     'SOLUTION' IS RETURNED IN VRV UPON EXIT                                          AT 48
   0572                                                                                          AT 48
   0573         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 48
   0574         DIMENSION IAD(MAXNB,NN),IADN(NN),IADD(NN),B(MAXNB,NN),VRV(NN)                    AT 48
   0575                                                                                          AT 169
   0576   *     LOWER INVERSION                                                                  AT 169
   0577                                                                                          AT 169
   0578         DO 20 I=1,NN                                                                     AT 169
   0579           SUM = VRV(I)                                                                   AT 19f
   0580           K = IADD(I)                                                                    AT 1be
   0581           DO 30 J=1,(K-1)                                                                AT 1d3
   0582             INODE = IAD(J,I)                                                             AT 1ff
   0583             SUM = SUM - B(J,I)*VRV(INODE)                                                AT 235
   0584      30   CONTINUE                                                                       AT 28d
   0585                                                                                          AT 2a8
   0586           VRV(I) = B(K,I)*SUM                                                            AT 2a8
   0587                                                                                          AT 304
   0588      20 CONTINUE                                                                         AT 304
   0589                                                                                          AT 31f
   0590   *     UPPER INVERSION                                                                  AT 31f
   0591                                                                                          AT 31f
   0592         DO 40 I=NN,1,-1                                                                  AT 31f
   0593           SUM = VRV(I)                                                                   AT 34f
   0594           N = IADN(I)                                                                    AT 36e
   0595           K = IADD(I)                                                                    AT 383
   0596           DO 50 J=(K+1),N                                                                AT 398
   0597             INODE = IAD(J,I)                                                             AT 3bf
   0598             SUM = SUM - B(J,I)*VRV(INODE)                                                AT 3f5
   0599      50   CONTINUE                                                                       AT 44d
   0600                                                                                          AT 468
   0601           VRV(I) = SUM                                                                   AT 468
   0602                                                                                          AT 487
   0603      40 CONTINUE                                                                         AT 487
   0604                                                                                          AT 49f
   0605         RETURN                                                                           AT 49f
   0606         END                                                                              AT 4a4
   0607                                                                                          AT 48
   0608   ************************************************************************               AT 0
   0609                                                                                          AT 48
   0610         SUBROUTINE MATM2 (S1,R,P,NN,IAD,IADN,MAXNB)                                      AT 48
   0611                                                                                          AT 48
   0612   *     MULTIPLY MATRIX R BY VECTOR P TO OBTAIN S1                                       AT 48
   0613                                                                                          AT 48
   0614         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 48
   0615         DIMENSION S1(NN),P(NN),R(MAXNB,NN),IAD(MAXNB,NN),IADN(NN)                        AT 48
   0616                                                                                          AT 169
   0617         DO 30 I=1,NN                                                                     AT 169
   0618           SUM = 0.0D0                                                                    AT 199
   0619           N = IADN(I)                                                                    AT 1aa
   0620           DO 40 J=1,N                                                                    AT 1c6
   0621             INODE = IAD(J,I)                                                             AT 1e9
   0622             SUM = SUM + R(J,I)*P(INODE)                                                  AT 222
   0623      40   CONTINUE                                                                       AT 26f
   0624                                                                                          AT 28a
   0625           S1(I) = SUM                                                                    AT 28a
   0626      30 CONTINUE                                                                         AT 2a9
   0627                                                                                          AT 2c4
   0628         RETURN                                                                           AT 2c4
   0629         END                                                                              AT 2c9
   0630                                                                                          AT 40
   0631   ************************************************************************               AT 0
   0632                                                                                          AT 40
   0633         FUNCTION SDOT (NN,R,B)                                                           AT 40
   0634                                                                                          AT 40
   0635   *     OBTAIN DOT PRODUCT OF R AND B                                                    AT 40
   0636                                                                                          AT 40
   0637         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 40
   0638         DIMENSION R(NN),B(NN)                                                            AT 40
   0639                                                                                          AT 90
   0640         SDOT = 0.0D0                                                                     AT 90
   0641         DO 100 L=1,NN                                                                    AT 9e
   0642           SDOT = SDOT + R(L)*B(L)                                                        AT ce
   0643   100   CONTINUE                                                                         AT fc
   0644                                                                                          AT 10e
   0645         RETURN                                                                           AT 10e
   0646         END                                                                              AT 113
   0647                                                                                          AT 48
   0648   ************************************************************************               AT 0
   0649                                                                                          AT 48
   0650         FUNCTION SDOTK (NN,K,R,B,MAXNN,MNORTH)                                           AT 48
   0651                                                                                          AT 48
   0652   *     OBTAIN DOT PRODUCT OF R AND B                                                    AT 48
   0653                                                                                          AT 48
   0654         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 48
   0655         DIMENSION R(MAXNN,MNORTH),B(NN)                                                  AT 48
   0656                                                                                          AT c0
   0657         SDOTK = 0.0D0                                                                    AT c0
   0658         DO 100 L=1,NN                                                                    AT ce
   0659           SDOTK = SDOTK + R(L,K)*B(L)                                                    AT 103
   0660   100   CONTINUE                                                                         AT 153
   0661                                                                                          AT 165
   0662         RETURN                                                                           AT 165
   0663         END                                                                              AT 16a
   0664                                                                                          AT 4c
   0665   ************************************************************************               AT 0
   0666                                                                                          AT 4c
   0667         FUNCTION SNRM (NN,R)                                                             AT 4c
   0668                                                                                          AT 4c
   0669   *     COMPUTE MAXIMUM NORM OF R                                                        AT 4c
   0670                                                                                          AT 4c
   0671         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 4c
   0672         DIMENSION R(NN)                                                                  AT 4c
   0673                                                                                          AT 74
   0674         SNRM = 0.0D0                                                                     AT 74
   0675         DO 100 L=1,NN                                                                    AT 84
   0676           TEMP = DABS(R(L))                                                              AT b1
   0677           IF (TEMP.GT.SNRM) SNRM = TEMP                                                  AT d5
   0678   100   CONTINUE                                                                         AT f0
   0679                                                                                          AT 102
   0680         RETURN                                                                           AT 102
   0681         END                                                                              AT 107
   0682                                                                                          AT 3f
   0683   ************************************************************************               AT 0
   0684                                                                                          AT 3f
   0685         SUBROUTINE SAXPYK (NN,SA,K,FX,FY,MAXNN,MNORTH)                                   AT 3f
   0686                                                                                          AT 3f
   0687   *     MULTIPLY VECTOR FX BY SCALAR SA AND ADD TO VECTOR FY                             AT 3f
   0688                                                                                          AT 3f
   0689         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 3f
   0690         DIMENSION FX(MAXNN,MNORTH),FY(NN)                                                AT 3f
   0691                                                                                          AT b7
   0692         IF (NN.GT.0) THEN                                                                AT b7
   0693           DO 100 I=1,NN                                                                  AT d0
   0694              FY(I) = SA*FX(I,K) + FY(I)                                                  AT fe
   0695   100     CONTINUE                                                                       AT 15c
   0696         ENDIF                                                                            AT 16e
   0697                                                                                          AT 16e
   0698         RETURN                                                                           AT 16e
   0699         END                                                                              AT 173
   0700                                                                                          AT 31
   0701   ************************************************************************               AT 0
   0702                                                                                          AT 31
   0703         SUBROUTINE SCOPY (NN,FX,FY)                                                      AT 31
   0704                                                                                          AT 31
   0705   *     COPY VECTOR FX INTO VECTOR FY                                                    AT 31
   0706                                                                                          AT 31
   0707         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 31
   0708         DIMENSION FX(NN),FY(NN)                                                          AT 31
   0709                                                                                          AT 81
   0710         IF (NN.GT.0) THEN                                                                AT 81
   0711           DO 100 I=1,NN                                                                  AT 9a
   0712              FY(I) = FX(I)                                                               AT c2
   0713   100     CONTINUE                                                                       AT e4
   0714         ENDIF                                                                            AT f6
   0715                                                                                          AT f6
   0716         RETURN                                                                           AT f6
   0717         END                                                                              AT fb
   0718                                                                                          AT 3f
   0719   ************************************************************************               AT 0
   0720                                                                                          AT 3f
   0721         SUBROUTINE SCOPYK (N,K,FX,FY,MAXNN,MNORTH)                                       AT 3f
   0722                                                                                          AT 3f
   0723   *     COPY VECTOR FX INTO VECTOR FY                                                    AT 3f
   0724                                                                                          AT 3f
   0725         IMPLICIT REAL*8 (A-H,O-Z)                                                        AT 3f
   0726         DIMENSION FX(N),FY(MAXNN,MNORTH)                                                 AT 3f
   0727                                                                                          AT b7
   0728         IF (N.GT.0) THEN                                                                 AT b7
   0729           DO 100 I=1,N                                                                   AT d0
   0730              FY(I,K) = FX(I)                                                             AT 104
   0731   100     CONTINUE                                                                       AT 148
   0732         ENDIF                                                                            AT 15a
   0733                                                                                          AT 15a
   0734         RETURN                                                                           AT 15a
   0735         END                                                                              AT 15f
   0736                                                                                          AT 178
   0737   * ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||               AT 0




End of Compilation - Clocked 0.03 seconds
